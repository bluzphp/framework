<?php
/**
 * Copyright (c) 2013 by Bluz PHP Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * @namespace
 */
namespace Bluz\Tests\Db;

use Bluz;
use Bluz\Db;
use Bluz\Db\Query;
use Bluz\Db\Query\SelectBuilder;
use Bluz\Db\Query\InsertBuilder;
use Bluz\Db\Query\UpdateBuilder;
use Bluz\Db\Query\DeleteBuilder;
use Bluz\Tests;

/**
 * Test class for Query Builder.
 * Generated by PHPUnit on 2013-06-17 at 13:52:01.
 * @todo Separate to 4 tests for every builder
 */
class BuilderTest extends Bluz\Tests\TestCase
{
    /**
     * Complex test of select builder
     */
    public function testSelect()
    {
        $builder = new SelectBuilder();
        $builder = $builder
            ->select('u.*', 'ua.*')
            ->from('users', 'u')
            ->leftJoin('u', 'users_actions', 'ua', 'ua.userId = u.id')
            ->where('u.id = ? OR u.id = ?', 4, 5)
            ->orWhere('u.id IN (?)', [4, 5])
            ->andWhere('u.status = ? OR u.status = ?', 'active', 'pending')
            ->orWhere('u.login LIKE (?)', 'A%')
            ->limit(5)
        ;

        $check = 'SELECT u.*, ua.*'
            . ' FROM users u LEFT JOIN users_actions ua ON ua.userId = u.id'
            . ' WHERE (((u.id = "4" OR u.id = "5") OR (u.id IN ("4","5")))'
            . ' AND (u.status = "active" OR u.status = "pending")) OR (u.login LIKE ("A%"))'
            . ' LIMIT 5 OFFSET 0';

        $this->assertEquals($builder->getQuery(), $check);
    }

    /**
     * Complex test of insert builder
     */
    public function testInsert()
    {
        $builder = new InsertBuilder();
        $builder = $builder
            ->insert('test`')
            ->set('name', 'example')
            ->set('email', 'example@domain.com')
        ;
        $check = 'INSERT INTO `test` SET `name` = "example", `email` = "example@domain.com"';

        $this->assertEquals($builder->getQuery(), $check);
    }

    /**
     * Complex test of update builder
     */
    public function testUpdate()
    {
        $builder = new UpdateBuilder();
        $builder = $builder
            ->update('test')
            ->setArray(
                [
                    'status' => 'disable'
                ]
            )
            ->where('id = ?', 5)
        ;
        $check = 'UPDATE `test` SET `status` = "disable" WHERE id = "5"';

        $this->assertEquals($builder->getQuery(), $check);
    }

    /**
     * Complex test of delete builder
     */
    public function testDelete()
    {
        $builder = new DeleteBuilder();
        $builder = $builder
            ->delete('test')
            ->where('id = ?', 5)
            ->limit(1)
        ;
        $check = 'DELETE FROM `test` WHERE id = "5" LIMIT 1';

        $this->assertEquals($builder->getQuery(), $check);
    }
}
